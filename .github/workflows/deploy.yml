name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  checks: write

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  # Quality assurance jobs
  lint:
    name: üîç Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        env:
          CACHE_KEY: ${{ hashFiles('**/package-lock.json') }}
      
      - name: Clear npm cache
        run: npm cache clean --force
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: TypeScript type checking
        run: npx tsc --noEmit

  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        env:
          CACHE_KEY: ${{ hashFiles('**/package-lock.json') }}
      
      - name: Clear npm cache
        run: npm cache clean --force
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
      

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        env:
          CACHE_KEY: ${{ hashFiles('**/package-lock.json') }}
      
      - name: Clear npm cache
        run: npm cache clean --force
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Check for outdated packages
        run: npm outdated || true
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: üèóÔ∏è Build & Performance
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      preview-url: ${{ steps.deploy-preview.outputs.preview-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Analyze bundle size
        run: |
          echo "## üì¶ Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          find dist/assets -name "*.js" -o -name "*.css" | while read file; do
            size=$(stat -c%s "$file")
            gzipped=$(gzip -c "$file" | wc -c)
            echo "| $(basename "$file") | ${size} bytes | ${gzipped} bytes |" >> $GITHUB_STEP_SUMMARY
          done
      
      - name: Performance budget check
        run: |
          # Check main bundle size (should be under 1MB)
          main_js=$(find dist/assets -name "index-*.js" | head -1)
          if [ -f "$main_js" ]; then
            size=$(stat -c%s "$main_js")
            if [ $size -gt 1048576 ]; then
              echo "‚ùå Main bundle size ($size bytes) exceeds 1MB limit!"
              exit 1
            else
              echo "‚úÖ Main bundle size: $size bytes (under 1MB limit)"
            fi
          fi
      
      - name: Setup Pages (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: ./dist
          retention-days: 30
      
      - name: Upload Pages artifact (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
      
      # Deploy preview for PRs
      - name: Deploy Preview (PR only)
        if: github.event_name == 'pull_request'
        id: deploy-preview
        run: |
          echo "preview-url=https://pr-${{ github.event.number }}-preview.github.io" >> $GITHUB_OUTPUT
          echo "üöÄ Preview would be available at: https://pr-${{ github.event.number }}-preview.github.io" >> $GITHUB_STEP_SUMMARY

  # Production deployment (main branch only)
  deploy-production:
    name: üöÄ Deploy Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Staging deployment (develop branch) - Simplified
  deploy-staging:
    name: üé≠ Deploy Staging
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    steps:
      - name: Staging deployment placeholder
        run: |
          echo "üé≠ Staging deployment would be configured here" >> $GITHUB_STEP_SUMMARY
          echo "Currently configured for develop branch only" >> $GITHUB_STEP_SUMMARY

  # Notification job
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ö†Ô∏è Deployment status: Check individual jobs"
          fi
