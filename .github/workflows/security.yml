name: Security Scanning

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run security scans weekly on Sundays at 1 AM UTC
    - cron: '0 1 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run audit and capture output
          audit_output=$(npm audit --audit-level=moderate --json 2>/dev/null || true)
          
          if echo "$audit_output" | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "❌ **Security vulnerabilities found:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            npm audit --audit-level=moderate >> $GITHUB_STEP_SUMMARY || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No security vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Check for outdated packages
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Update Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          outdated_output=$(npm outdated --json 2>/dev/null || echo "{}")
          
          if [ "$outdated_output" != "{}" ]; then
            echo "📝 **Outdated packages found:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Wanted | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
            
            echo "$outdated_output" | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          else
            echo "✅ **All packages are up to date**" >> $GITHUB_STEP_SUMMARY
          fi

  codeql-analysis:
    name: 🔍 CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install license checker
        run: npm install -g license-checker
      
      - name: Check licenses
        run: |
          echo "## 📄 License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Generate license report
          license-checker --json > licenses.json
          
          # Check for problematic licenses
          problematic_licenses=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "LGPL-2.0" "LGPL-2.1" "LGPL-3.0")
          
          found_issues=false
          for license in "${problematic_licenses[@]}"; do
            if grep -q "$license" licenses.json; then
              if [ "$found_issues" = false ]; then
                echo "❌ **Problematic licenses detected:**" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                found_issues=true
              fi
              echo "- $license" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [ "$found_issues" = false ]; then
            echo "✅ **All licenses are compliant**" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Count total packages and licenses
          total_packages=$(jq 'length' licenses.json)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Summary:**" >> $GITHUB_STEP_SUMMARY
          echo "- Total packages scanned: $total_packages" >> $GITHUB_STEP_SUMMARY
